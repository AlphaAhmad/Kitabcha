package com.mkrdeveloper.viewmodeljetpack.app.kitabcha.presentation

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Dialog
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import app.kitabcha.data.entity.CategoryEntity
import app.kitabcha.data.entity.MangaEntity
import app.kitabcha.presentation.BrowseScreenViewModel
import app.kitabcha.source.AvailableSources
import kotlinx.coroutines.runBlocking

@Composable
fun BrowseScreenDriver(
    navController: NavController,
    userId: Int,
    sourceId: Long,
) {
    val browseScreenViewModel = hiltViewModel<BrowseScreenViewModel>()
    BrowseScreen(browseScreenViewModel, navController = navController, userId, sourceId)
}

@Composable
fun BrowseScreen(
    browseScreenViewModel: BrowseScreenViewModel,
    navController: NavController,
    userId: Int,
    sourceID: Long,
) {
    val source = AvailableSources.sources[sourceID]!!

    val categoryList by browseScreenViewModel.categories.collectAsStateWithLifecycle()
    val searchManga by browseScreenViewModel.searchQuery.collectAsStateWithLifecycle()
    // val searchingInProgress by BrowseViewModel.searchingInProgress.collectAsStateWithLifecycle()
    val mangaListToDisplay by browseScreenViewModel.remoteManga.collectAsStateWithLifecycle()
    val flag by browseScreenViewModel.lazyListFlag.collectAsStateWithLifecycle()
    val pageNumber by browseScreenViewModel.page.collectAsStateWithLifecycle()
    Column(
        modifier =
            Modifier
                .fillMaxSize()
                .padding(16.dp),
    ) {
        TextField(
            value = searchManga,
            onValueChange = browseScreenViewModel::onSearchTextChange,
            modifier =
                Modifier
                    .fillMaxWidth()
                    .padding(top = 30.dp),
            placeholder = { Text(text = "Search") },
            maxLines = 1,
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(onClick = ({ browseScreenViewModel.getMangas(sourceID, pageNumber) })) // TODO: pass sourceID from navigator
        {
            Text(text = "search")
        }
        Spacer(modifier = Modifier.height(16.dp))
        // Lazy column to show all results of search
        if (flag) {
            LazyColumnOfList(Manga = mangaListToDisplay, browseScreenViewModel, userId, navController, sourceID)
        }
    }
}

@Composable
fun MangaClicked(
    BrowseViewModel: BrowseScreenViewModel,
    manga: MangaEntity?,
    UserID: Int,
    SourceID: Long,
    _navControler: NavController,
) {
    if (BrowseViewModel.currentManga != null) {
        LaunchedEffect(key1 = Unit) {
            runBlocking {
                BrowseViewModel.getCategory(UserID) // stores value in a variable in BrowserScreenViewModel named ListOfCategory
            }
        }
        // Getting the real MangaId generated by DB when we inserted the manga in our database
        val mangaIdFromDB = manga?.let { BrowseViewModel.getRealMangaID(it.mangaURL, SourceID) }
        PopupTextField(
            "Select Catagory",
            BrowseViewModel,
            _navControler,
            BrowseViewModel.categories.collectAsStateWithLifecycle().value,
        )
        // TODO: Finih passing these parameters
    }
}

@Composable
fun LazyColumnOfList(
    Manga: List<MangaEntity>,
    BrowseViewModel: BrowseScreenViewModel,
    _UserID: Int,
    navcontrol: NavController,
    SourceId: Long,
) {
    LazyColumn(
        modifier =
            Modifier
                .fillMaxWidth()
                .verticalScroll(rememberScrollState())
                .padding(16.dp),
    ) {
        items(Manga.size) { index ->
            Text(
                text = Manga[index].mangaTitle,
                modifier = Modifier.clickable { BrowseViewModel.updateMangaEntity(Manga[index]) },
            )
        }
    }
    MangaClicked(BrowseViewModel, BrowseViewModel.currentManga.collectAsStateWithLifecycle().value, _UserID, SourceId, navcontrol)
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PopupTextField(
    text1: String, // It will have the text "Select Catagory"
    // onConfirmation: () ->Unit,
    // onDissmissRequest: () ->Unit, // dimiss when dismiss button is pressed
    browseViewModel: BrowseScreenViewModel,
    navController: NavController,
    CategoryList: List<CategoryEntity>,
) {
    var selectedCategory by remember { mutableStateOf(CategoryList[0]) }
    Dialog(
        onDismissRequest = { browseViewModel.makeMangaVarNull() },
        // radio button for each option
        content = {
            CategoryList.forEach { option ->
                Row(
                    Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    content = {
                        RadioButton(
                            selected = (option == selectedCategory),
                            onClick = { selectedCategory = option },
                        )
                        Text(text = option.catTitle, modifier = Modifier.padding(8.dp))
                    },
                )
            }
            // this is dismiss button
            TextButton(
                onClick = { browseViewModel.makeMangaVarNull() },
                modifier = Modifier.padding(8.dp),
            ) {
                Text("Dismiss")
            }
            TextButton( // TODO: LOOK INTO this
                onClick = {
                },
                // { browseViewModel.pushMangaInCategory(browseViewModel.pushMangaInCategory(
                // browseViewModel.currentManga.collectAsStateWithLifecycle().value,
                // CategoryGotSelected.catID)},
                modifier = Modifier.padding(8.dp),
            ) {
                Text("OK")
            }
        },
    )
}
